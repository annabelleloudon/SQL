-- This Spotify data was downloaded from Kaggle.  I created a table to insert the data then performed some analytics on the data using SQL. --

-- Here I created the table for the data.
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

-- Then I inserted the Spotify Data .csv into the table.  From this point, I explored the data using SQL, answering questions I had about the data. --

-- I started with grabbing the first ten rows of the data to see how it looked. --
SELECT * FROM spotifydata LIMIT 10;

-- I decided to create a list of songs for either jogging (120-140 BPM) or running (141-160 BPM) based on their BPM. --
SELECT artist_name, track_name, tempo,
CASE
WHEN tempo > 160 THEN 'N/A'
WHEN tempo > 141 THEN 'Running'
WHEN tempo > 120 THEN 'Jogging'
ELSE 'N/A'
END AS run_jog
FROM spotifydata
WHERE run_jog <> 'N/A'
ORDER BY run_jog;

-- I was curious to know what the average duration of the 5 longest songs is --
SELECT AVG(duration_ms)
FROM Spotifydata
ORDER BY duration_ms DESC
LIMIT 5;

-- I also wondered about the average loudness for the first 5 songs on the list. --
SELECT AVG(loudness)
FROM spotifydata
WHERE id < 6
GROUP BY loudness;

-- Finally I wanted to determine the title, artist, and popularity of the most danceable song. --
SELECT MAX(danceability), artist_name, track_name, popularity
FROM spotifydata;
